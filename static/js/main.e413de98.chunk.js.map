{"version":3,"sources":["utils/localStorageModule.ts","components/atmos.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["setItem","key","item","localStorage","JSON","stringify","getItem","setter","localToDos","parse","categoryState","atom","default","toDoState","categoriesState","toDoSelector","selector","get","toDos","selectedCategory","filter","toDo","category","CreateToDo","setToDos","useSetRecoilState","useRecoilState","categories","setCategories","useRecoilValue","useForm","defaultValues","register","handleSubmit","setValue","onSubmit","oldToDos","newToDos","text","id","Date","now","includes","oldCategories","newCategories","required","placeholder","ToDo","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","map","index","ToDoList","setCategory","useEffect","value","onInput","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.e413de98.chunk.js","sourcesContent":["export const setItem = (key: string, item: any) =>\n  localStorage.setItem(key, JSON.stringify(item));\n\nexport const getItem = (key: string, setter: (item: any) => void) => {\n  const localToDos = localStorage.getItem(key);\n  localToDos && setter(JSON.parse(localToDos));\n};\n","import { atom, selector } from \"recoil\";\n\n// enumerable\n// 일련의 숫자를 문자로 표현해 줌 -> 원칙적으로는 숫자\n// 문자열을 안정적으로 비교하거나 사용 가능\n// export enum Categories {\n//   \"TO_DO\" = \"TO_DO\", // 0\n//   \"DOING\" = \"DOING\", // 1\n//   \"DONE\" = \"DONE\", // 2\n// }\n\nconst defaultCategories = [\"To Do\", \"Doing\", \"Done\"];\n\nexport type TCategories = typeof defaultCategories[number];\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  // 세 가지의 문자열만 받을 수 있음\n  category: typeof defaultCategories[number];\n}\n\nexport const categoryState = atom<IToDo[\"category\"]>({\n  key: \"category\",\n  default: \"To Do\",\n});\n\n// 제네릭으로 인터페이스를 전달\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const categoriesState = atom<typeof defaultCategories>({\n  key: \"categories\",\n  default: defaultCategories,\n});\n\nexport const toDoSelector = selector({\n  // selector의 key\n  key: \"toDoSelector\",\n  // get function\n  // 인자로 options 객체를 받는데 get function이 들어있음\n  get: ({ get }) => {\n    // atom을 가져옴\n    const toDos = get(toDoState);\n    const selectedCategory = get(categoryState);\n    // 여기서 return하는 값이 이 selector의 value가 됨\n    return [...toDos.filter((toDo) => toDo.category === selectedCategory)];\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { setItem } from \"../utils/localStorageModule\";\nimport {\n  categoriesState,\n  categoryState,\n  TCategories,\n  toDoState,\n} from \"./atmos\";\n\ninterface IForm {\n  toDo: string;\n  category: TCategories;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const [categories, setCategories] = useRecoilState(categoriesState);\n  const selectedCategory = useRecoilValue(categoryState);\n  const { register, handleSubmit, setValue } = useForm<IForm>({\n    defaultValues: { category: selectedCategory },\n  });\n\n  const handleValid = ({ toDo, category }: IForm) => {\n    // 새로운 배열을 return해야 함\n    setToDos((oldToDos) => {\n      const newToDos = [{ text: toDo, id: Date.now(), category }, ...oldToDos];\n      setItem(\"ToDos\", newToDos);\n      return newToDos;\n    });\n    setValue(\"toDo\", \"\");\n    if (categories.includes(category)) return;\n    setCategories((oldCategories) => {\n      const newCategories = [...oldCategories, category];\n      setItem(\"Categories\", newCategories);\n      return newCategories;\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <input\n        {...register(\"category\", {\n          required: \"Please write a category\",\n        })}\n        placeholder=\"Write a category\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { setItem } from \"../utils/localStorageModule\";\nimport { categoriesState, IToDo, toDoState } from \"./atmos\";\n\nfunction ToDo({ text, category, id }: IToDo) {\n  const setToDos = useSetRecoilState(toDoState);\n  const categories = useRecoilValue(categoriesState);\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const {\n      currentTarget: { name },\n    } = event;\n    setToDos((oldToDos) => {\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\n      const newToDo = { text, id, category: name as IToDo[\"category\"] };\n      const newToDos = [\n        ...oldToDos.slice(0, targetIndex),\n        newToDo,\n        ...oldToDos.slice(targetIndex + 1),\n      ];\n      setItem(\"ToDos\", newToDos);\n      return newToDos;\n    });\n  };\n\n  return (\n    <li>\n      <span>{text}</span>\n      {categories.map((category, index) => {\n        return (\n          <button key={index} name={category} onClick={onClick}>\n            {category}\n          </button>\n        );\n      })}\n    </li>\n  );\n}\n\nexport default ToDo;\n","import React, { useEffect } from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { getItem } from \"../utils/localStorageModule\";\nimport {\n  categoriesState,\n  categoryState,\n  toDoSelector,\n  toDoState,\n} from \"./atmos\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const toDos = useRecoilValue(toDoSelector);\n  const setToDos = useSetRecoilState(toDoState);\n  const setCategories = useSetRecoilState(categoriesState);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const categories = useRecoilValue(categoriesState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  useEffect(() => {\n    getItem(\"ToDos\", setToDos);\n    getItem(\"Categories\", setCategories);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <select value={category} onInput={onInput}>\n        {categories.map((category, index) => (\n          <option key={index} value={category}>\n            {category}\n          </option>\n        ))}\n      </select>\n      <CreateToDo />\n      {toDos?.map((toDo) => (\n        <ToDo key={toDo.id} {...toDo} />\n      ))}\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}