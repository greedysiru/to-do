{"version":3,"sources":["components/atmos.tsx","components/CreateToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["categoryState","atom","key","default","toDoState","toDoSelector","selector","get","toDos","filter","toDo","category","CreateToDo","setToDos","useSetRecoilState","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDoList","useRecoilValue","useRecoilState","setCategory","value","onInput","event","currentTarget","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"uMASaA,EAAgBC,YAAK,CAChCC,IAAK,WACLC,QAAS,UAIEC,EAAYH,YAAc,CACrCC,IAAK,OACLC,QAAS,KAGEE,EAAeC,YAAS,CAEnCJ,IAAK,eAGLK,IAAK,YAAc,IAEXC,GAAQD,EAFE,EAAVA,KAEYH,GAElB,MAAO,CACLI,EAAMC,QAAO,SAACC,GAAD,MAA4B,UAAlBA,EAAKC,YAC5BH,EAAMC,QAAO,SAACC,GAAD,MAA4B,UAAlBA,EAAKC,YAC5BH,EAAMC,QAAO,SAACC,GAAD,MAA4B,SAAlBA,EAAKC,gB,6BCEnBC,MA1Bf,WACE,IAAMC,EAAWC,YAAkBV,GACnC,EAA6CW,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAWhC,OACE,uBAAMC,SAAUF,GAVE,SAAC,GAAqB,IAAnBP,EAAkB,EAAlBA,KAErBG,GAAS,SAACO,GAAD,OACP,CAAEC,KAAMX,EAAMY,GAAIC,KAAKC,MAAOb,SAAU,UADjC,mBAEJS,OAELF,EAAS,OAAQ,OAIjB,UACE,iDACMF,EAAS,OAAQ,CACnBS,SAAU,0BAFd,IAIEC,YAAY,mBAEd,6CCASC,I,EAAAA,EAvBf,WACE,MAA4BC,YAAevB,GAA3C,mBACA,GADA,eACgCwB,YAAe7B,IAA/C,mBAAOW,EAAP,KAAiBmB,EAAjB,KAOA,OACE,gCACE,wCACA,uBACA,cAAC,EAAD,IACA,yBAAQC,MAAOpB,EAAUqB,QAXb,SAACC,GACf,IACmBF,EACfE,EADFC,cAAiBH,MAEnBD,EAAYC,IAOV,UACE,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,OAAd,yBCpBFI,EAAcC,YAAH,u+CAuDI,SAACC,GAAD,OAAWA,EAAMC,MAAMC,WAClC,SAACF,GAAD,OAAWA,EAAMC,MAAME,aAkBlBC,MATf,WACE,OACE,qCACE,cAACN,EAAD,IACA,cAAC,EAAD,QCjENO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeN,MCRkB,CACrCC,QAAS,UACTC,UAAW,QACXK,YAAa,UACbC,YAAa,eDIT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.6cd3e18e.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\n\nexport interface IToDo {\n  text: string;\n  id: number;\n  // 세 가지의 문자열만 받을 수 있음\n  category: \"TO_DO\" | \"DOING\" | \"DONE\";\n}\n\nexport const categoryState = atom({\n  key: \"category\",\n  default: \"TO_DO\",\n});\n\n// 제네릭으로 인터페이스를 전달\nexport const toDoState = atom<IToDo[]>({\n  key: \"toDo\",\n  default: [],\n});\n\nexport const toDoSelector = selector({\n  // selector의 key\n  key: \"toDoSelector\",\n  // get function\n  // 인자로 options 객체를 받는데 get function이 들어있음\n  get: ({ get }) => {\n    // atom을 가져옴\n    const toDos = get(toDoState);\n    // 여기서 return하는 값이 이 selector의 value가 됨\n    return [\n      toDos.filter((toDo) => toDo.category === \"TO_DO\"),\n      toDos.filter((toDo) => toDo.category === \"DOING\"),\n      toDos.filter((toDo) => toDo.category === \"DONE\"),\n    ];\n  },\n});\n","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport { toDoState } from \"./atmos\";\n\ninterface IForm {\n  toDo: string;\n}\n\nfunction CreateToDo() {\n  const setToDos = useSetRecoilState(toDoState);\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n\n  const handleValid = ({ toDo }: IForm) => {\n    // 새로운 배열을 return해야 함\n    setToDos((oldToDos) => [\n      { text: toDo, id: Date.now(), category: \"TO_DO\" },\n      ...oldToDos,\n    ]);\n    setValue(\"toDo\", \"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"toDo\", {\n          required: \"Please write a To Do\",\n        })}\n        placeholder=\"Write a to do\"\n      />\n      <button>Add</button>\n    </form>\n  );\n}\n\nexport default CreateToDo;\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport { categoryState, toDoSelector, toDoState } from \"./atmos\";\nimport CreateToDo from \"./CreateToDo\";\nimport ToDo from \"./ToDo\";\n\nfunction ToDoList() {\n  const [toDo, doing, done] = useRecoilValue(toDoSelector);\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    const {\n      currentTarget: { value },\n    } = event;\n    setCategory(value);\n  };\n  return (\n    <div>\n      <h1>To Dos</h1>\n      <hr />\n      <CreateToDo />\n      <select value={category} onInput={onInput}>\n        <option value=\"TO_DO\">To Do</option>\n        <option value=\"DOING\">Doing</option>\n        <option value=\"DONE\">Done</option>\n      </select>\n    </div>\n  );\n}\n\nexport default ToDoList;\n","import { createGlobalStyle } from \"styled-components\";\nimport ToDoList from \"./components/ToDoList\";\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, menu, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmain, menu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, main, menu, nav, section {\n  display: block;\n}\n/* HTML5 hidden-attribute fix for newer browsers */\n*[hidden] {\n    display: none;\n}\nbody {\n  line-height: 1;\n}\nmenu, ol, ul {\n  list-style: none;\n}\nblockquote, q {\n  quotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color:${(props) => props.theme.bgColor};\n  color:${(props) => props.theme.textColor};\n  line-height: 1.2;\n}\na {\n  text-decoration:none;\n  color:inherit;\n}\n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from \"styled-components\";\n\nexport const darkTheme: DefaultTheme = {\n  bgColor: \"#2f3640\",\n  textColor: \"white\",\n  accentColor: \"#9c88ff\",\n  cardBgColor: \"transparent\",\n};\n"],"sourceRoot":""}